#pragma kernel CSMain

float TerrainWidth;
float TerrainLength;
float TerrainHeight;

int TerrainHeightMapResolution;
Texture2D<float4> TerrainHeightMap; //Todo float4 -> float1

Texture2D<float4> DensityMap;
struct FoliageData
{
    int DensityMapResolution;
    float3 FoliageScale;
    float3 ZitterScale;
    float pad;
};
StructuredBuffer<FoliageData> foliageData;
int FoliageDataCount;

struct SamplePoint
{
    float2 bayerMatrixUV;
    float2 densityMapUV;
    float2 heightMapUV;
    float threshold;
    float pad;
};
StructuredBuffer<SamplePoint> samplePoints; 
struct FoliagePoint
{
    float4x4 TRSMat;
    float3 worldNormal;
    int foliageType;
};
AppendStructuredBuffer<FoliagePoint> foliagePoints01;
AppendStructuredBuffer<FoliagePoint> foliagePoints02;
AppendStructuredBuffer<FoliagePoint> foliagePoints03;
AppendStructuredBuffer<FoliagePoint> foliagePoints04;

uint Hash(uint s)
{
    s ^= 2747636419u;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    return s;
}

float Random(uint seed)
{
    return float(Hash(seed)) / 4294967295.0; // 2^32-1
}

float4x4 m_translate(float4x4 m, float3 v)
{
    float x = v.x, y = v.y, z = v.z;
    m[0][3] = x;
    m[1][3] = y;
    m[2][3] = z;
    return m;
}

float4x4 quaternion_to_matrix(float4 quat)
{
    float4x4 m = float4x4(float4(0, 0, 0, 0), float4(0, 0, 0, 0), float4(0, 0, 0, 0), float4(0, 0, 0, 0));

    float x = quat.x, y = quat.y, z = quat.z, w = quat.w;
    float x2 = x + x, y2 = y + y, z2 = z + z;
    float xx = x * x2, xy = x * y2, xz = x * z2;
    float yy = y * y2, yz = y * z2, zz = z * z2;
    float wx = w * x2, wy = w * y2, wz = w * z2;

    m[0][0] = 1.0 - (yy + zz);
    m[0][1] = xy - wz;
    m[0][2] = xz + wy;

    m[1][0] = xy + wz;
    m[1][1] = 1.0 - (xx + zz);
    m[1][2] = yz - wx;

    m[2][0] = xz - wy;
    m[2][1] = yz + wx;
    m[2][2] = 1.0 - (xx + yy);

    m[3][3] = 1.0;

    return m;
}

float4x4 m_scale(float4x4 m, float3 v)
{
    float x = v.x, y = v.y, z = v.z;

    m[0][0] *= x; m[1][0] *= y; m[2][0] *= z;
    m[0][1] *= x; m[1][1] *= y; m[2][1] *= z;
    m[0][2] *= x; m[1][2] *= y; m[2][2] *= z;
    m[0][3] *= x; m[1][3] *= y; m[2][3] *= z;

    return m;
}

float4x4 trs(float3 position, float4 quat, float3 scale)
{
    float4x4 m = quaternion_to_matrix(quat);
    m = m_scale(m, scale);
    m = m_translate(m, position);
    return m;
}

[numthreads(64,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID, uint groupIndex : SV_GroupIndex, uint3 groupID : SV_GroupID)
{
    int targetIndex = groupIndex + groupID.x * 64;
    SamplePoint samplePoint = samplePoints[targetIndex];

    float densitySum = 0.0f;
    for(int i = 0 ; i < FoliageDataCount; i++)
    {
        densitySum += DensityMap[uint2(samplePoint.densityMapUV * foliageData[i].DensityMapResolution)][1];
    }
    
    if(densitySum > samplePoint.threshold)
    {
        FoliagePoint foliagePoint = (FoliagePoint)0;
        
        //0. 확률 분포에 따라 생성 될 FoliageData 선택.
        int choosenFoliageIndex = 0;
        float randRange = 1.0f;
        float randFloat = Random(id.x);

        for(int i = 0 ; i < FoliageDataCount; i++)
        {
            float normalizedDensity = DensityMap[uint2(samplePoint.densityMapUV * foliageData[i].DensityMapResolution)][1] / densitySum;
            if(randRange - normalizedDensity <= randFloat && randFloat < randRange)
            {
                choosenFoliageIndex = i;
                break;
            }
            randRange -= normalizedDensity;
        }
        foliagePoint.foliageType = choosenFoliageIndex;
        float3 scaleZitter = foliageData[choosenFoliageIndex].ZitterScale * float3(Random(id.x), Random(id.y), Random(id.z));
        
        //1. samplePoint에서의 worldPosition 계산
        float terrainWorldHeight = TerrainHeightMap[samplePoint.heightMapUV * TerrainHeightMapResolution] * TerrainHeight * 2.0f; //To Do : 이거 왜 2배 해야함??
        float3 worldPosition = float3(TerrainWidth * samplePoint.heightMapUV.x,
            terrainWorldHeight, TerrainLength * samplePoint.heightMapUV.y);
         
        foliagePoint.TRSMat = trs(worldPosition, float4(0.0f, 0.0f, 0.0f, 1.0f), foliageData[choosenFoliageIndex].FoliageScale + scaleZitter);

        
        //2. samplePoint에서의 worldNormal 계산
        //

        //3. out Append
        if(choosenFoliageIndex == 0)
        {
            foliagePoints01.Append(foliagePoint);
        }
        else if(choosenFoliageIndex == 1)
        {
            foliagePoints02.Append(foliagePoint);
        }
        else if(choosenFoliageIndex == 2)
        {
            foliagePoints03.Append(foliagePoint);
        }
        else
        {
            foliagePoints04.Append(foliagePoint);
        }
    }
}


